// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`As a developer, I can generate graphql mutation for create entity by table schema should generate graphql tag for create mutation by common table schema  1`] = `
"mutation CommonsCreate($data: CommonCreateInput!) {
  commonCreate(data: $data) {
    id
    field1
    field2
    field3
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create entity by table schema should generate graphql tag for create mutation by table schema for application 1`] = `
"mutation CommonsCreate($data: SalesforceCommonCreateInput!) {
  Salesforce {
    commonCreate(data: $data) {
      id
      field1
      field2
      field3
      _description
    }
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create entity by table schema should generate graphql tag for create mutation by table schema with files 1`] = `
"mutation FilesCreate($data: FileCreateInput!) {
  fileCreate(data: $data) {
    id
    file {
      id
      fileId
      filename
      downloadUrl
      shareUrl
      meta
      public
    }
    fileList {
      items {
        id
        fileId
        filename
        downloadUrl
        shareUrl
        meta
        public
      }
      count
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create entity by table schema should generate graphql tag for create mutation by table schema with relation 1`] = `
"mutation RelationCreate($data: RelationCreateInput!) {
  relationCreate(data: $data) {
    id
    field1 {
      id
      _description
    }
    field2
    field3
    field4 {
      items {
        id
        _description
      }
      count
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create entity by table schema should generate graphql tag for create mutation by table schema with smart fields 1`] = `
"mutation SmartFieldsCreate($data: SmartFieldCreateInput!) {
  smartFieldCreate(data: $data) {
    id
    phone {
      code
      number
    }
    address {
      street1
      street2
      zip
      city
      state
    }
    phoneList {
      code
      number
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create entity by table schema should generate graphql tag for create mutation by table schema with smart fields 2`] = `
"mutation TableWithoutUserFieldsCreate {
  tableWithoutUserFieldCreate {
    id
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create many entities by table schema should generate graphql tag for create mutation by common table schema  1`] = `
"mutation CommonsCreateMany($data: [CommonCreateManyInput]!) {
  commonCreateMany(data: $data) {
    count
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create many entities by table schema should generate graphql tag for create mutation by table schema for application 1`] = `
"mutation CommonsCreateMany($data: [SalesforceCommonCreateManyInput]!) {
  Salesforce {
    commonCreateMany(data: $data) {
      count
    }
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create many entities by table schema should generate graphql tag for create mutation by table schema with files 1`] = `
"mutation FilesCreateMany($data: [FileCreateManyInput]!) {
  fileCreateMany(data: $data) {
    count
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create many entities by table schema should generate graphql tag for create mutation by table schema with relation 1`] = `
"mutation RelationCreateMany($data: [RelationCreateManyInput]!) {
  relationCreateMany(data: $data) {
    count
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create many entities by table schema should generate graphql tag for create mutation by table schema with smart fields 1`] = `
"mutation SmartFieldsCreateMany($data: [SmartFieldCreateManyInput]!) {
  smartFieldCreateMany(data: $data) {
    count
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for create many entities by table schema should generate graphql tag for create mutation by table schema with smart fields 2`] = `
"
  mutation TableWithoutUserFieldsCreateMany {
  
  tableWithoutUserFieldCreateMany {
      count
    }
  }"
`;

exports[`As a developer, I can generate graphql mutation for delete entity by table schema should generate graphql tag for delete mutation by common table schema  1`] = `
"mutation CommonsDelete($filter: CommonKeyFilter!, $force: Boolean) {
  commonDelete(filter: $filter, force: $force) {
    success
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for delete entity by table schema should generate graphql tag for delete mutation by table schema for application 1`] = `
"mutation CommonsDelete($filter: SalesforceCommonKeyFilter!, $force: Boolean) {
  Salesforce {
    commonDelete(filter: $filter, force: $force) {
      success
    }
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for delete entity by table schema should generate graphql tag for delete mutation by table schema with files 1`] = `
"mutation FilesDelete($filter: FileKeyFilter!, $force: Boolean) {
  fileDelete(filter: $filter, force: $force) {
    success
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for delete entity by table schema should generate graphql tag for delete mutation by table schema with relation 1`] = `
"mutation RelationDelete($filter: RelationKeyFilter!, $force: Boolean) {
  relationDelete(filter: $filter, force: $force) {
    success
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for delete entity by table schema should generate graphql tag for delete mutation by table schema with smart fields 1`] = `
"mutation SmartFieldsDelete($filter: SmartFieldKeyFilter!, $force: Boolean) {
  smartFieldDelete(filter: $filter, force: $force) {
    success
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for update entity by table schema should generate graphql tag for update mutation by common table schema  1`] = `
"mutation CommonsUpdate($data: CommonUpdateInput!, $filter: CommonKeyFilter) {
  commonUpdate(data: $data, filter: $filter) {
    id
    field1
    field2
    field3
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for update entity by table schema should generate graphql tag for update mutation by table schema for application 1`] = `
"mutation CommonsUpdate($data: SalesforceCommonUpdateInput!, $filter: SalesforceCommonKeyFilter) {
  Salesforce {
    commonUpdate(data: $data, filter: $filter) {
      id
      field1
      field2
      field3
      _description
    }
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for update entity by table schema should generate graphql tag for update mutation by table schema with files 1`] = `
"mutation FilesUpdate($data: FileUpdateInput!, $filter: FileKeyFilter) {
  fileUpdate(data: $data, filter: $filter) {
    id
    file {
      id
      fileId
      filename
      downloadUrl
      shareUrl
      meta
      public
    }
    fileList {
      items {
        id
        fileId
        filename
        downloadUrl
        shareUrl
        meta
        public
      }
      count
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for update entity by table schema should generate graphql tag for update mutation by table schema with relation 1`] = `
"mutation RelationUpdate($data: RelationUpdateInput!, $filter: RelationKeyFilter) {
  relationUpdate(data: $data, filter: $filter) {
    id
    field1 {
      id
      _description
    }
    field2
    field3
    field4 {
      items {
        id
        _description
      }
      count
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql mutation for update entity by table schema should generate graphql tag for update mutation by table schema with smart fields 1`] = `
"mutation SmartFieldsUpdate($data: SmartFieldUpdateInput!, $filter: SmartFieldKeyFilter) {
  smartFieldUpdate(data: $data, filter: $filter) {
    id
    phone {
      code
      number
    }
    address {
      street1
      street2
      zip
      city
      state
    }
    phoneList {
      code
      number
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql query for list by table schema should generate graphql tag for the table content by common table schema  1`] = `
"query CommonsTableContent($filter: CommonFilter, $orderBy: [CommonOrderBy], $sort: [CommonSort!], $after: String, $before: String, $first: Int, $last: Int, $skip: Int) {
  commonsList(filter: $filter, orderBy: $orderBy, sort: $sort, after: $after, before: $before, first: $first, last: $last, skip: $skip) {
    items {
      id
      field1
      field2
      field3
      _description
    }
    count
  }
}"
`;

exports[`As a developer, I can generate graphql query for list by table schema should generate graphql tag for the table content by table schema for application 1`] = `
"query CommonsTableContent($filter: SalesforceCommonFilter, $orderBy: [SalesforceCommonOrderBy], $sort: [SalesforceCommonSort!], $after: String, $before: String, $first: Int, $last: Int, $skip: Int) {
  Salesforce {
    commonsList(filter: $filter, orderBy: $orderBy, sort: $sort, after: $after, before: $before, first: $first, last: $last, skip: $skip) {
      items {
        id
        field1
        field2
        field3
        _description
      }
      count
    }
  }
}"
`;

exports[`As a developer, I can generate graphql query for list by table schema should generate graphql tag for the table content by table schema with files 1`] = `
"query FilesTableContent($filter: FileFilter, $orderBy: [FileOrderBy], $sort: [FileSort!], $after: String, $before: String, $first: Int, $last: Int, $skip: Int) {
  filesList(filter: $filter, orderBy: $orderBy, sort: $sort, after: $after, before: $before, first: $first, last: $last, skip: $skip) {
    items {
      id
      file {
        id
        fileId
        filename
        downloadUrl
        shareUrl
        meta
        public
      }
      fileList {
        items {
          id
          fileId
          filename
          downloadUrl
          shareUrl
          meta
          public
        }
        count
      }
      _description
    }
    count
  }
}"
`;

exports[`As a developer, I can generate graphql query for list by table schema should generate graphql tag for the table content by table schema with relation 1`] = `
"query RelationTableContent($filter: RelationFilter, $orderBy: [RelationOrderBy], $sort: [RelationSort!], $after: String, $before: String, $first: Int, $last: Int, $skip: Int) {
  relationsList(filter: $filter, orderBy: $orderBy, sort: $sort, after: $after, before: $before, first: $first, last: $last, skip: $skip) {
    items {
      id
      field1 {
        id
        _description
      }
      field2
      field3
      field4 {
        items {
          id
          _description
        }
        count
      }
      _description
    }
    count
  }
}"
`;

exports[`As a developer, I can generate graphql query for list by table schema should generate graphql tag for the table content by table schema with smart fields 1`] = `
"query SmartFieldsTableContent($filter: SmartFieldFilter, $orderBy: [SmartFieldOrderBy], $sort: [SmartFieldSort!], $after: String, $before: String, $first: Int, $last: Int, $skip: Int) {
  smartFieldsList(filter: $filter, orderBy: $orderBy, sort: $sort, after: $after, before: $before, first: $first, last: $last, skip: $skip) {
    items {
      id
      createdAt
      updatedAt
      createdBy {
        id
        _description
      }
      phone {
        code
        number
      }
      address {
        street1
        street2
        zip
        city
        state
      }
      phoneList {
        code
        number
      }
      _description
    }
    count
  }
}"
`;

exports[`As a developer, I can generate graphql query for list by table schema should generate graphql tag for the table content by table schema with some relation count 1`] = `
"query RelationTableContent($filter: RelationFilter, $orderBy: [RelationOrderBy], $sort: [RelationSort!], $after: String, $before: String, $first: Int, $last: Int, $skip: Int) {
  relationsList(filter: $filter, orderBy: $orderBy, sort: $sort, after: $after, before: $before, first: $first, last: $last, skip: $skip) {
    items {
      id
      field1 {
        id
        _description
      }
      field2
      field3
      field4(first: 5) {
        items {
          id
          _description
        }
        count
      }
      _description
    }
    count
  }
}"
`;

exports[`As a developer, I can generate graphql query for list by table schema should generate query string  1`] = `
"query TableSchemaTableContent($filter: TableSchemaFilter, $orderBy: [TableSchemaOrderBy], $sort: [TableSchemaSort!], $after: String, $before: String, $first: Int, $last: Int, $skip: Int) {
  tableSchemasList(filter: $filter, orderBy: $orderBy, sort: $sort, after: $after, before: $before, first: $first, last: $last, skip: $skip) {
    items {
      id
      number
      numberList
      relation {
        id
        _description
      }
      relationList {
        items {
          id
          _description
        }
        count
      }
      _description
    }
    count
  }
}"
`;

exports[`As a developer, I can generate graphql query for read entity by table schema should generate graphql tag for row query by common table schema  1`] = `
"query CommonsEntity($id: ID!) {
  common(id: $id) {
    id
    field1
    field2
    field3
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql query for read entity by table schema should generate graphql tag for row query by common table schema according permissions 1`] = `
"query CommonsEntity($id: ID!) {
  common(id: $id) {
    id
    field2
    field3
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql query for read entity by table schema should generate graphql tag for row query by table schema for application 1`] = `
"query CommonsEntity($id: ID!) {
  Salesforce {
    common(id: $id) {
      id
      field1
      field2
      field3
      _description
    }
  }
}"
`;

exports[`As a developer, I can generate graphql query for read entity by table schema should generate graphql tag for row query by table schema with files 1`] = `
"query FilesEntity($id: ID!) {
  file(id: $id) {
    id
    file {
      id
      fileId
      filename
      downloadUrl
      shareUrl
      meta
      public
    }
    fileList {
      items {
        id
        fileId
        filename
        downloadUrl
        shareUrl
        meta
        public
      }
      count
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql query for read entity by table schema should generate graphql tag for row query by table schema with relation 1`] = `
"query RelationEntity($id: ID!) {
  relation(id: $id) {
    id
    field1 {
      id
      _description
    }
    field2
    field3
    field4 {
      items {
        id
        _description
      }
      count
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate graphql query for read entity by table schema should generate graphql tag for row query by table schema with smart fields 1`] = `
"query SmartFieldsEntity($id: ID!) {
  smartField(id: $id) {
    id
    createdAt
    updatedAt
    createdBy {
      id
      _description
    }
    phone {
      code
      number
    }
    address {
      street1
      street2
      zip
      city
      state
    }
    phoneList {
      code
      number
    }
    _description
  }
}"
`;

exports[`As a developer, I can generate table columns  by table schema should generate table columns list  1`] = `
Array [
  Object {
    "meta": Object {
      "fieldType": "NUMBER",
      "fieldTypeAttributes": Object {
        "currency": null,
        "format": "NUMBER",
        "maxValue": null,
        "minValue": null,
        "precision": 0,
      },
      "isList": false,
    },
    "name": "untouchable",
    "title": "Untouchable",
  },
  Object {
    "meta": Object {
      "fieldType": "NUMBER",
      "fieldTypeAttributes": Object {
        "currency": null,
        "format": "NUMBER",
        "maxValue": null,
        "minValue": null,
        "precision": 0,
      },
      "isList": false,
    },
    "name": "numberanother",
    "title": "Numberanother",
  },
  Object {
    "meta": Object {
      "fieldType": "NUMBER",
      "fieldTypeAttributes": Object {
        "currency": null,
        "format": "NUMBER",
        "maxValue": null,
        "minValue": null,
        "precision": 0,
      },
      "isList": false,
    },
    "name": "number",
    "title": "Number",
  },
  Object {
    "meta": Object {
      "fieldType": "NUMBER",
      "fieldTypeAttributes": Object {
        "currency": null,
        "format": "NUMBER",
        "maxValue": null,
        "minValue": null,
        "precision": 0,
      },
      "isList": true,
    },
    "name": "numberList",
    "title": "NumberList",
  },
  Object {
    "meta": Object {
      "fieldType": "SMART",
      "fieldTypeAttributes": Object {
        "format": "PHONE",
        "innerFields": Array [
          Object {
            "description": null,
            "displayName": null,
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 4,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "name": "code",
          },
          Object {
            "description": null,
            "displayName": null,
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 8,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "name": "number",
          },
        ],
      },
      "isList": false,
    },
    "name": "phone",
    "title": "Phone",
  },
  Object {
    "meta": Object {
      "fieldType": "SMART",
      "fieldTypeAttributes": Object {
        "format": "PHONE",
        "innerFields": Array [
          Object {
            "description": null,
            "displayName": null,
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 4,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "name": "code",
          },
          Object {
            "description": null,
            "displayName": null,
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 8,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "name": "number",
          },
        ],
      },
      "isList": true,
    },
    "name": "phones",
    "title": "Phones",
  },
  Object {
    "meta": Object {
      "fieldType": "SMART",
      "fieldTypeAttributes": Object {
        "format": "ADDRESS",
        "innerFields": Array [
          Object {
            "description": null,
            "displayName": "Street 1",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "name": "street1",
          },
          Object {
            "description": null,
            "displayName": "Street 2",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": false,
            "isUnique": false,
            "name": "street2",
          },
          Object {
            "description": null,
            "displayName": "Zip",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": false,
            "isUnique": false,
            "name": "zip",
          },
          Object {
            "description": null,
            "displayName": "City",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "name": "city",
          },
          Object {
            "description": null,
            "displayName": "State",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": false,
            "isUnique": false,
            "name": "state",
          },
        ],
      },
      "isList": false,
    },
    "name": "address",
    "title": "Address",
  },
  Object {
    "meta": Object {
      "fieldType": "SMART",
      "fieldTypeAttributes": Object {
        "format": "ADDRESS",
        "innerFields": Array [
          Object {
            "description": null,
            "displayName": "Street 1",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "name": "street1",
          },
          Object {
            "description": null,
            "displayName": "Street 2",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": false,
            "isUnique": false,
            "name": "street2",
          },
          Object {
            "description": null,
            "displayName": "Zip",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": false,
            "isUnique": false,
            "name": "zip",
          },
          Object {
            "description": null,
            "displayName": "City",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": true,
            "isUnique": false,
            "name": "city",
          },
          Object {
            "description": null,
            "displayName": "State",
            "fieldType": "TEXT",
            "fieldTypeAttributes": Object {
              "fieldSize": 255,
              "format": "UNFORMATTED",
            },
            "isList": false,
            "isRequired": false,
            "isUnique": false,
            "name": "state",
          },
        ],
      },
      "isList": true,
    },
    "name": "addresses",
    "title": "Addresses",
  },
  Object {
    "meta": Object {
      "fieldType": "TEXT",
      "fieldTypeAttributes": Object {
        "fieldSize": 100,
        "format": "UNFORMATTED",
      },
      "isList": false,
    },
    "name": "scalar",
    "title": "Scalar",
  },
  Object {
    "meta": Object {
      "fieldType": "FILE",
      "fieldTypeAttributes": Object {
        "format": "FILE",
        "maxSize": null,
        "typeRestrictions": null,
      },
      "isList": false,
    },
    "name": "file",
    "title": "File",
  },
  Object {
    "meta": Object {
      "fieldType": "FILE",
      "fieldTypeAttributes": Object {
        "format": "FILE",
        "maxSize": null,
        "typeRestrictions": null,
      },
      "isList": true,
    },
    "name": "fileList",
    "title": "FileList",
  },
  Object {
    "meta": Object {
      "fieldType": "TEXT",
      "fieldTypeAttributes": Object {
        "fieldSize": 100,
        "format": "UNFORMATTED",
      },
      "isList": true,
    },
    "name": "scalarList",
    "title": "ScalarList",
  },
  Object {
    "meta": Object {
      "fieldType": "TEXT",
      "fieldTypeAttributes": Object {
        "fieldSize": 100,
        "format": "UNFORMATTED",
      },
      "isList": false,
    },
    "name": "relation.scalar",
    "title": "Scalar",
  },
  Object {
    "meta": Object {
      "fieldType": "TEXT",
      "fieldTypeAttributes": Object {
        "fieldSize": 100,
        "format": "UNFORMATTED",
      },
      "isList": true,
    },
    "name": "relation.scalarList",
    "title": "ScalarList",
  },
  Object {
    "meta": Object {
      "fieldType": "TEXT",
      "fieldTypeAttributes": Object {
        "fieldSize": 100,
        "format": "UNFORMATTED",
      },
      "isList": false,
    },
    "name": "relation.nestedRelation.scalar",
    "title": "Scalar",
  },
  Object {
    "meta": Object {
      "fieldType": "TEXT",
      "fieldTypeAttributes": Object {
        "fieldSize": 100,
        "format": "UNFORMATTED",
      },
      "isList": true,
    },
    "name": "relation.nestedRelation.scalarList",
    "title": "ScalarList",
  },
  Object {
    "meta": Object {
      "fieldType": "RELATION",
      "fieldTypeAttributes": null,
      "isList": false,
    },
    "name": "relation.nestedRelation.nestedRelation",
    "title": "NestedRelation",
  },
  Object {
    "meta": Object {
      "fieldType": "RELATION",
      "fieldTypeAttributes": null,
      "isList": true,
    },
    "name": "relation.nestedRelation.nestedRelationList",
    "title": "NestedRelationList",
  },
  Object {
    "meta": Object {
      "fieldType": "RELATION",
      "fieldTypeAttributes": null,
      "isList": false,
    },
    "name": "relation.nestedRelation",
    "title": "NestedRelation",
  },
  Object {
    "meta": Object {
      "fieldType": "RELATION",
      "fieldTypeAttributes": null,
      "isList": true,
    },
    "name": "relation.nestedRelationList",
    "title": "NestedRelationList",
  },
  Object {
    "meta": Object {
      "fieldType": "RELATION",
      "fieldTypeAttributes": null,
      "isList": false,
    },
    "name": "relation",
    "title": "Relation",
  },
  Object {
    "meta": Object {
      "fieldType": "RELATION",
      "fieldTypeAttributes": null,
      "isList": true,
    },
    "name": "relationList",
    "title": "RelationList",
  },
  Object {
    "meta": Object {
      "fieldType": "JSON",
      "fieldTypeAttributes": null,
      "isList": false,
    },
    "name": "json",
    "title": "Json",
  },
  Object {
    "meta": Object {
      "fieldType": "JSON",
      "fieldTypeAttributes": null,
      "isList": true,
    },
    "name": "jsonList",
    "title": "JsonList",
  },
  Object {
    "meta": Object {
      "fieldType": "NUMBER",
      "fieldTypeAttributes": Object {
        "isBigInt": true,
        "precision": 0,
      },
      "isList": false,
    },
    "name": "bigInt",
    "title": "BigInt",
  },
  Object {
    "meta": Object {
      "fieldType": "NUMBER",
      "fieldTypeAttributes": Object {
        "isBigInt": true,
        "precision": 0,
      },
      "isList": true,
    },
    "name": "bigIntList",
    "title": "BigIntList",
  },
]
`;

exports[`As a developer, I can generate table columns  by table schema should generate table columns list with included columns 1`] = `
Array [
  Object {
    "meta": Object {
      "fieldType": "NUMBER",
      "fieldTypeAttributes": Object {
        "currency": null,
        "format": "NUMBER",
        "maxValue": null,
        "minValue": null,
        "precision": 0,
      },
      "isList": false,
    },
    "name": "number",
    "title": "Number",
  },
  Object {
    "meta": Object {
      "fieldType": "TEXT",
      "fieldTypeAttributes": Object {
        "fieldSize": 100,
        "format": "UNFORMATTED",
      },
      "isList": true,
    },
    "name": "relation.scalarList",
    "title": "ScalarList",
  },
  Object {
    "meta": Object {
      "fieldType": "RELATION",
      "fieldTypeAttributes": null,
      "isList": true,
    },
    "name": "relationList",
    "title": "RelationList",
  },
]
`;
